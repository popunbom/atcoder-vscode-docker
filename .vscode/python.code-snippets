{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${2:label}, ${3:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Template": {
		"scope": "python",
		"prefix": "pctemp",
		"body": [
			"#!/usr/bin/env python3",
			"# -*- coding: utf-8 -*-",
			"",
			"import sys",
			"from os import path",
			"",
			"sys.path.append(path.abspath(path.join(path.dirname(__file__), \"../utils\")))",
			"from EmurateInput import input",
			"",
			"",
			"${0}"
		],
		"description": "競プロ用テンプレート"
	},
	"Closed Range": {
		"scope": "python",
		"prefix": "crange",
		"body": [
			"def crange(start, stop, step=1):",
			"\treturn range(start, stop + 1, step)",
			"$0"
		]
	},
	"Input (int, 1)": {
		"scope": "python",
		"prefix": "input_int_1",
		"body": [
			"${1:first} = int(input())",
			"${0}"
		]
	},
	"Input (str, 1)": {
		"scope": "python",
		"prefix": "input_str_1",
		"body": [
			"${1:first} = input()",
			"${0}"
		]
	},
	"Input (int, 2)": {
		"scope": "python",
		"prefix": "input_int_2",
		"body": [
			"${1:first}, ${2:second} = [int(x) for x in input().split()]",
			"${0}"
		]
	},
	"Input (int, 3)": {
		"scope": "python",
		"prefix": "input_int_3",
		"body": [
			"${1:first}, ${2:second}, ${3:third} = [int(x) for x in input().split()]",
			"${0}"
		]
	},
	"Input (arr, int)": {
		"scope": "python",
		"prefix": "input_arr_int",
		"body": [
			"${1:arr} = [int(x) for x in input().split()]",
			"${0}"
		]
	},
	"Input (arr, char)": {
		"scope": "python",
		"prefix": "input_arr_char",
		"body": [
			"${1:arr} = [input().split() for _ in range(${2:times})]",
			"${0}"
		]
	},
	"Each Line (str)": {
		"scope": "python",
		"prefix": "input_line_str",
		"body": [
			"${1:arr} = [input() for _ in range(${2:times})]",
			"${0}"
		]
	},
	"Each Line (int)": {
		"scope": "python",
		"prefix": "input_line_int",
		"body": [
			"${1:arr} = [int(input()) for _ in range(${2:times})]",
			"${0}"
		]
	},
	"Array of array of int": {
		"scope": "python",
		"prefix": "input_arr_of_arr_int",
		"body": [
			"${1:arr} = [[int(x) for x in input().split()] for _ in range(${2:times})]",
			"${0}"
		]
	},
	"Function with Memoize": {
		"scope": "python",
		"prefix": "func_memoize",
		"body": [
			"@functools.lru_cache(maxsize=${1:None})",
			"def ${2:func_name}(${3:args}):",
			"\t${0}"
		],
		"description": "関数定義 (メモ化)"
	}
}
